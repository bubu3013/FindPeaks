#include<iostream>
#include<queue>
#include<string>
#include<fstream>
#define MAX 10000

using namespace std;

//finding peak with binary search
int findMax(int a[][MAX], int rows, int mid, int &max)
{
    int peak_index = 0;
    for (int i = 0; i < rows; i++)
    {
        //if a[i][mid] is larger than now_max
        if (max<a[i][mid])
        {   //to store its location
            max=a[i][mid];
            peak_index = i;
            //to store peak's row and col
        }
    }
    return peak_index;
}

// Function to find a peak element with binary search
int findPeak(int a[][MAX],int rows,int columns,int mid)
{
    //Evaluating maximum of mid column.
    //max is passed by reference.
    int max = 0;
    int max_index = findMax(a, rows, mid, max);

    // If we are on the first or last column, max is a peak
    //??????
    if (mid == 0 || mid == columns-1)
        return max;

    // If mid column maximum is also peak
    if (max >= a[max_index][mid-1] &&
            max >= a[max_index][mid+1])
        return max;

    // If max is less than its left
    if (max < a[max_index][mid-1])
        return findPeak(a, rows, columns, mid - mid/2);

    // If max is less than its right
    if (max < a[max_index][mid+1])
        return findPeak(a, rows, columns, mid+mid/2);
}
int count_peaks(int a[][MAX],int m,int n,int peak)
{
    int sum=0;
    queue<int> location;

    //to convert array into string
    string peak_in_string(&a[0][0],&a[m][n]+1);
    cout<<peak_in_string<<endl;
    
    //but it doesn't work
    for (int iter=peak_in_string.find_first_of((char)peak);iter<m*n;iter++)
    {
        if ((int)peak_in_string[iter]==peak)
        {
            cout<<iter<<endl;
            location.push(iter/m);
            location.push(iter%n);
        }
    }
    for (int i=0;i<sum*2;i++)
    {
        cout<<location.front()<<" ";
        location.pop();
        if (i%2==1)cout<<endl;
    }
    //cout<<peak<<endl;
}
// Driver Code
int main()
{
    //input row and col
    int m,n;
    //fstream file;
    //file.open("matrix.data");

    cin>>m>>n;

    int a[][MAX] = {{11,10,10,10,10},
                     {10,10,10,10,11},
                     {10,11,10,10,10},
                     {10,10,10,11,10},
                    {10,10,11,10,10}};

    count_peaks(a,m,n,findPeak(a, m, n,n/2));
    return 0;
}
