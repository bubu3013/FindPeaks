#include<iostream>
#include<queue>
#include<fstream>
#include<vector>
#include<algorithm>
#define MAX 10000

using namespace std;
queue<int> location;

 // Function to find a peak element with binary search
int findPeak(vector<vector<int> > a,int m,int n)
{
	//4 vertices
	//upleft
	if(a[0][0]>=a[0][1]&&a[0][0]>=a[1][0])
	{
		location.push(1);
		location.push(1);
	}
	//upright
	if(a[0][n-1]>=a[0][n-2]&&a[0][0]>=a[1][n-1])
	{
		location.push(1);
		location.push(n);
	}
	//downleft
	if(a[m-1][0]>=a[m-1][1]&&a[m-1][0]>=a[m-2][0])
	{
		location.push(m);
		location.push(1);
	}
	//downright
	if(a[m-1][n-1]>=a[m-1][n-2]&&a[m-1][n-1]>=a[m-2][n-1])
	{
		location.push(m);
		location.push(n);
	}
	//left edge without vertices
	for (int i=1;i<m-1;i++)
	{
		//大於上 下 右 
		if (a[i][0]>=a[i-1][0]&&a[i][0]>=a[i+1][0]&&a[i][0]>=a[i][1])
		{
			location.push(i+1);
			location.push(1);
		}
	}
	//up edge without vertices
	for (int j=1;j<n-1;j++)
	{
		//大於左 下 右 
		if (a[0][j]>=a[0][j-1]&&a[0][j]>=a[0][j+1]&&a[0][j]>=a[1][j])
		{
			location.push(1);
			location.push(j+1);
		}
	}
	//right edge without vertices
	for (int i=1;i<m-1;i++)
	{
		//大於上 下 左 
		if (a[i][n-1]>=a[i-1][n-1]&&a[i][n-1]>=a[i+1][n-1]&&a[i][n-1]>=a[i][n-2])
		{
			location.push(i+1);
			location.push(n);
		}
	}
	//down edge without vertices
	for (int j=1;j<n-1;j++)
	{
		//大於左 上 右 
		if (a[m-1][j]>=a[0][j-1]&&a[m-1][j]>=a[0][j+1]&&a[m-1][j]>=a[m-2][j])
		{
			location.push(m);
			location.push(j+1);
		}
	}
	//剩下的 
 	for (int i=1;i<m-1;++i)
 	{
 		for (int j=1;j<n-1;++j)
		{
			//如果大於 上 左  下 右  
			if(a[i][j]>=a[i-1][j]&&a[i][j]>=a[i][j-1]&&a[i][j]>=a[i+1][j]&&a[i][j]>=a[i][j+1])
			{
				location.push(i+1);
				location.push(j+1);
			}
		}
	}
}

int main(int argc, char *argv[])
{
    //input row and col
    int m,n;
    int j;
    int row=0,col=0;
    int q_size;
    
    //*argv[1] is student_id

    fstream file; 
    ifstream input("TA_matrix_3.data");
    ofstream fout("final.peak"); 

    stringstream ss,s0,s1;
	
    vector<string> v;
    vector<vector<int> > a;
    vector<int> rowVector(MAX);
    
    file.open("TA_matrix_3.data",ios::in);

    file>>row;
    file>>col;

	/*got all the elements here in 2d array*/

    if (file.is_open())
    {	
		int i=0;
        while(file.good())
        {
        	if (i<row)a.push_back(rowVector);
            for (int j=0;j<col;j++)
            {
                    file>>a[i][j];
            }
            i++;
        }
    }
    file.close();

    findPeak(a, row, col);

    q_size=location.size();

	fout<<q_size/2<<endl;
    
    for (int i=0;i<q_size;i++)
    {
        if (i%2==0)
		{
			fout<<location.front()<<" ";
		}
		else if (i%2==1)
		{	
			fout<<location.front()<<endl;
		}
        location.pop();
    }
    
    return 0;
}
